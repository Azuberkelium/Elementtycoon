<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Element Shop Tycoon</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #1e293b;
            transition: background-color 0.3s, color 0.3s;
        }

        .container {
            max-width: 900px;
            margin: auto;
            padding: 1rem;
        }

        .element-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 1rem;
        }

        .element-card {
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s, border 0.2s;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .element-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
        }

        .element-selected {
            border: 4px solid #f97316;
            transform: scale(1.05);
        }

        .customer-card {
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            min-height: 150px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            position: relative;
        }

        .customer-queue-container {
            position: relative;
            height: 200px;
        }

        .customer-card-animated {
            animation: slide-in 1s ease-out forwards;
        }

        @keyframes slide-in {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .fade-out {
            animation: fade-out 0.5s forwards;
        }

        @keyframes fade-out {
            to {
                opacity: 0;
                transform: scale(0.9);
            }
        }

        .success-message {
            position: fixed;
            top: 25%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #22c55e;
            color: white;
            padding: 1rem 2rem;
            border-radius: 0.75rem;
            font-size: 1.5rem;
            font-weight: bold;
            z-index: 1000;
            animation: fade-in-out 2s forwards;
        }
        
        @keyframes fade-in-out {
            0% { opacity: 0; }
            25% { opacity: 1; }
            75% { opacity: 1; }
            100% { opacity: 0; }
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: #fff;
            padding: 2rem;
            border-radius: 0.75rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .pulse {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }

        /* Dark Mode Styles */
        .dark {
            background-color: #1a202c;
            color: #e2e8f0;
        }

        .dark .element-card {
            background-color: #2d3748;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            color: #e2e8f0;
        }

        /* Override to make sure the text color is visible on element cards */
        .dark .element-card .text-4xl,
        .dark .element-card .text-sm {
            color: #e2e8f0;
        }
        
        .dark .customer-card {
            background-color: #2d3748;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            color: #e2e8f0;
        }
        
        .dark .bg-white {
            background-color: #2d3748;
            color: #e2e8f0;
        }

        .dark .bg-gray-50 {
            background-color: #2d3748;
        }

        .dark .bg-gray-200 {
            background-color: #2d3748;
            color: #e2e8f0;
        }

        .dark .text-gray-600 {
            color: #a0aec0;
        }

        .dark .modal-content {
            background: #2d3748;
            color: #e2e8f0;
        }

        .dark .element-selected {
            border: 4px solid #f97316;
            background-color: #4a5568;
        }

        .dark .modal-content .text-gray-700 {
            color: #e2e8f0;
        }
    </style>
</head>
<body class="bg-gray-100 p-4">

<div id="game-container" class="container mx-auto">
    <div class="flex flex-col md:flex-row md:space-x-4 mb-4">
        <div class="flex-1 p-4 bg-white rounded-lg shadow-md flex flex-col justify-between">
            <h2 class="text-xl font-bold mb-2">Shop Stats</h2>
            <div class="flex flex-wrap justify-between text-lg">
                <p>ðŸ’° <span id="money">0</span></p>
                <p>ðŸ§ª <span id="research-level">1</span></p>
                <p>ðŸ“ˆ <span id="investment-level">0</span></p>
            </div>
            <div class="flex flex-wrap justify-between text-sm text-gray-600">
                <p>Money</p>
                <p>Research Level</p>
                <p>Investment Level</p>
            </div>
        </div>
        <div class="flex-1 p-4 bg-white rounded-lg shadow-md mt-4 md:mt-0 flex flex-col justify-between">
            <h2 class="text-xl font-bold mb-2">Next Element</h2>
            <p id="next-element-cost" class="text-lg font-semibold">Cost: â‚¬100</p>
            <p id="next-element-name" class="text-sm text-gray-600">Hydrogen</p>
            <button id="buy-next-element" class="mt-2 bg-blue-500 text-white rounded-md px-4 py-2 hover:bg-blue-600 transition-colors duration-200">
                Buy
            </button>
        </div>
    </div>

    <div id="customer-area" class="bg-gray-200 rounded-lg p-4 mb-4 customer-queue-container relative">
        <h2 class="text-xl font-bold mb-2">Customers</h2>
        <div id="customer-queue" class="flex items-center space-x-4 overflow-x-auto">
            <!-- Customer cards will be dynamically added here -->
        </div>
    </div>
    
    <div id="elements-shop-container" class="p-4 bg-white rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Your Elements</h2>
        <div id="elements-container" class="element-grid">
            <!-- Element cards will be dynamically added here -->
        </div>
    </div>

    <div class="p-4 bg-white rounded-lg shadow-md mt-4">
        <h2 class="text-xl font-bold mb-4">Upgrades</h2>
        <div class="flex flex-col md:flex-row md:space-x-4">
            <div class="flex-1 bg-gray-50 rounded-lg p-4 mb-4 md:mb-0">
                <h3 class="font-bold text-lg mb-2">Invest in Shop</h3>
                <p id="invest-cost" class="text-gray-600 mb-2">Cost: â‚¬50</p>
                <p class="text-sm">Increases customer frequency and payout.</p>
                <button id="invest-shop" class="mt-2 bg-green-500 text-white rounded-md px-4 py-2 hover:bg-green-600 transition-colors duration-200">
                    Invest
                </button>
            </div>
            <div class="flex-1 bg-gray-50 rounded-lg p-4">
                <h3 class="font-bold text-lg mb-2">Research</h3>
                <p id="research-cost" class="text-gray-600 mb-2">Cost: â‚¬75</p>
                <p class="text-sm">Halves the price of the next element.</p>
                <button id="research-lab" class="mt-2 bg-purple-500 text-white rounded-md px-4 py-2 hover:bg-purple-600 transition-colors duration-200">
                    Research
                </button>
            </div>
        </div>
        <div class="flex flex-col md:flex-row md:space-x-4 mt-4">
            <div class="flex-1 bg-gray-50 rounded-lg p-4 mb-4 md:mb-0">
                <h3 class="font-bold text-lg mb-2">Game Controls</h3>
                <p class="text-sm text-gray-600 mb-2">Manage your game session.</p>
                <div class="flex space-x-2">
                    <button id="toggle-dark-mode" class="flex-1 bg-gray-700 text-white rounded-md px-4 py-2 hover:bg-gray-800 transition-colors duration-200">
                        Toggle Dark Mode
                    </button>
                    <button id="restart-game" class="flex-1 bg-red-500 text-white rounded-md px-4 py-2 hover:bg-red-600 transition-colors duration-200">
                        Restart Game
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>

<div id="modal-container" class="hidden">
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 id="modal-title" class="text-2xl font-bold mb-4">Customer Request</h3>
            <p id="modal-text" class="text-gray-700 mb-4"></p>
            <div id="modal-buttons" class="flex justify-end space-x-2">
                <button id="close-modal-btn" class="bg-red-500 text-white rounded-md px-4 py-2 hover:bg-red-600 transition-colors duration-200">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    const game = {
        elements: [
            { symbol: "H", name: "Hydrogen", cost: 100, unlocked: true, color: "#e3f2fd" },
            { symbol: "He", name: "Helium", cost: 200, unlocked: true, color: "#fff9c4" },
            { symbol: "O", name: "Oxygen", cost: 300, unlocked: true, color: "#f8bbd0" },
            { symbol: "N", name: "Nitrogen", cost: 400, unlocked: false, color: "#c8e6c9" },
            { symbol: "C", name: "Carbon", cost: 500, unlocked: false, color: "#b0bec5" },
            { symbol: "Fe", name: "Iron", cost: 600, unlocked: false, color: "#d7ccc8" },
            { symbol: "Si", name: "Silicon", cost: 700, unlocked: false, color: "#b3e5fc" },
            { symbol: "S", name: "Sulfur", cost: 800, unlocked: false, color: "#fff176" },
            { symbol: "Mg", name: "Magnesium", cost: 900, unlocked: false, color: "#e0e0e0" },
            { symbol: "Na", name: "Sodium", cost: 1000, unlocked: false, color: "#e1bee7" },
            { symbol: "Ca", name: "Calcium", cost: 1100, unlocked: false, color: "#cfd8dc" },
            { symbol: "Al", name: "Aluminium", cost: 1200, unlocked: false, color: "#e3f2fd" },
            { symbol: "P", name: "Phosphorus", cost: 1300, unlocked: false, color: "#b3e5fc" },
            { symbol: "K", name: "Potassium", cost: 1400, unlocked: false, color: "#c8e6c9" },
            { symbol: "Ni", name: "Nickel", cost: 1500, unlocked: false, color: "#d7ccc8" },
            { symbol: "Cl", name: "Chlorine", cost: 1600, unlocked: false, color: "#f8bbd0" },
            { symbol: "F", name: "Fluorine", cost: 1700, unlocked: false, color: "#fff9c4" },
            { symbol: "I", name: "Iodine", cost: 1800, unlocked: false, color: "#b0bec5" },
            { symbol: "U", name: "Uranium", cost: 1900, unlocked: false, color: "#e0e0e0" },
            { symbol: "Ag", name: "Silver", cost: 2000, unlocked: false, color: "#d7ccc8" },
            { symbol: "Au", name: "Gold", cost: 2100, unlocked: false, color: "#fff176" },
        ],
        customers: [
            { name: "Saturn", needs: ["H", "He"], reward: 20, story: "I am the planet Saturn, and I require the fundamental building blocks of my atmosphere, Hydrogen and Helium, to maintain my glorious rings." },
            { name: "Earth", needs: ["N", "O", "H"], reward: 25, story: "I am Mother Earth, and I need Nitrogen and Oxygen for my atmosphere, and Hydrogen for my oceans. A healthy planet is a happy planet!" },
            { name: "Sun", needs: ["H", "He"], reward: 30, story: "I am the Sun, a star of immense power! I need Hydrogen and Helium to continue the fusion process that provides light and warmth to your solar system." },
            { name: "Mars", needs: ["Fe", "Si", "O"], reward: 28, story: "I am Mars, the Red Planet. My core is mostly Iron, and my crust is rich in Silicon and Oxygen. I'm building a new rover, and these are my key components!" },
            { name: "Jupiter", needs: ["H", "He"], reward: 22, story: "I am the great Jupiter! I'm a gas giant, so I am almost entirely made of Hydrogen and Helium. I'm just here to restock my reserves." },
            { name: "Dr. Alchemist", needs: ["N", "H"], reward: 35, story: "Greetings! I'm a chemist working on a new formula. I need Nitrogen and Hydrogen to create Ammonia ($$NH_3$$), a vital compound for agriculture." },
            { name: "Weldon the Welder", needs: ["Fe", "O"], reward: 40, story: "I'm building a new skyscraper, and I need Iron for the steel girders and Oxygen to fuel my cutting torch. This city won't build itself!" },
            { name: "Flora the Botanist", needs: ["C", "H", "O"], reward: 38, story: "I'm a botanist. I'm cultivating a rare species of plant that requires Carbon, Hydrogen, and Oxygen for photosynthesis." },
            { name: "Phil the Geologist", needs: ["Si", "O"], reward: 42, story: "I am a geologist. I am studying quartz, which is a common rock found on Earth. It's made of Silicon and Oxygen, or $$SiO_2$$." },
            { name: "Zubi the astronaut", needs: ["O"], reward: 32, story: "I'm heading to the moon! I need some pure Oxygen for my life support system. Safety first!" },
            { name: "Engineer", needs: ["Al", "Ni", "Fe"], reward: 50, story: "I'm building an alloy for a new spacecraft. It needs to be strong, light, and resistant to extreme temperatures, so I'm using Aluminum, Nickel, and Iron." },
            { name: "Farmer Jones", needs: ["K", "P", "N"], reward: 45, story: "I'm here to get some fertilizer! My crops need Potassium, Phosphorus, and Nitrogen to grow big and strong. It's the $$NPK$$ mixture!" },
        ],
        money: 0,
        researchLevel: 1,
        investmentLevel: 0,
        customerFrequency: 3000,
        unlockedElements: [],
        nextElementIndex: 0,
        activeCustomer: null,
        selectedElements: [],
        
        elementsContainer: document.getElementById('elements-container'),
        customerQueueContainer: document.getElementById('customer-queue'),
        moneyDisplay: document.getElementById('money'),
        researchLevelDisplay: document.getElementById('research-level'),
        investmentLevelDisplay: document.getElementById('investment-level'),
        nextElementCostDisplay: document.getElementById('next-element-cost'),
        nextElementNameDisplay: document.getElementById('next-element-name'),
        buyNextElementBtn: document.getElementById('buy-next-element'),
        investShopBtn: document.getElementById('invest-shop'),
        researchLabBtn: document.getElementById('research-lab'),
        investCostDisplay: document.getElementById('invest-cost'),
        researchCostDisplay: document.getElementById('research-cost'),
        toggleDarkModeBtn: document.getElementById('toggle-dark-mode'),
        restartGameBtn: document.getElementById('restart-game'),
        modalContainer: document.getElementById('modal-container'),
        modalTitle: document.getElementById('modal-title'),
        modalText: document.getElementById('modal-text'),
        modalButtons: document.getElementById('modal-buttons'),
        closeModalBtn: document.getElementById('close-modal-btn'),

        init() {
            this.loadGame();
            this.render();
            this.setupListeners();
            this.addCustomerToQueue();
            this.startCustomerInterval();
        },

        resetGame() {
            // Reset all game variables to their initial state
            this.money = 100;
            this.researchLevel = 1;
            this.investmentLevel = 0;
            this.customerFrequency = 3000;
            this.elements.forEach((el, index) => {
                el.unlocked = (index < 3); // Reset unlocked elements to the first 3
            });
            this.unlockedElements = this.elements.filter(el => el.unlocked).map(el => el.symbol);
            this.nextElementIndex = this.unlockedElements.length;
            this.activeCustomer = null;
            this.selectedElements = [];

            // Clear the customer queue
            this.customerQueueContainer.innerHTML = '';
            
            // Clear the customer interval and start a new one
            clearInterval(this.customerInterval);
            this.startCustomerInterval();

            this.saveGame();
            this.render();
            this.showSuccessMessage("Game has been restarted!");
        },

        saveGame() {
            const gameState = {
                money: this.money,
                researchLevel: this.researchLevel,
                investmentLevel: this.investmentLevel,
                unlockedElements: this.unlockedElements,
                nextElementIndex: this.nextElementIndex,
                isDarkMode: document.documentElement.classList.contains('dark')
            };
            localStorage.setItem('elementShopTycoonState', JSON.stringify(gameState));
        },

        loadGame() {
            const savedState = localStorage.getItem('elementShopTycoonState');
            if (savedState) {
                const gameState = JSON.parse(savedState);
                this.money = gameState.money;
                this.researchLevel = gameState.researchLevel;
                this.investmentLevel = gameState.investmentLevel;
                this.unlockedElements = gameState.unlockedElements;
                this.nextElementIndex = gameState.nextElementIndex;
                this.elements.forEach(el => el.unlocked = gameState.unlockedElements.includes(el.symbol));
                this.customerFrequency = Math.max(1000, 3000 - (this.investmentLevel * 200));

                if (gameState.isDarkMode) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
            } else {
                // Initial load: set a starting money amount
                this.money = 100;
                this.elements.filter(el => el.unlocked).map(el => this.unlockedElements.push(el.symbol));
            }
        },

        render() {
            this.renderElements();
            this.updateStats();
        },

        renderElements() {
            this.elementsContainer.innerHTML = '';
            this.elements.forEach(element => {
                if (element.unlocked) {
                    const card = document.createElement('div');
                    card.className = `element-card cursor-pointer transition-transform duration-200 hover:scale-105 p-4 rounded-lg shadow-lg text-center ${this.selectedElements.includes(element.symbol) ? 'element-selected' : 'bg-gray-200'}`;
                    card.style.backgroundColor = element.color;
                    card.dataset.symbol = element.symbol;
                    
                    const symbol = document.createElement('div');
                    symbol.className = 'text-4xl font-bold';
                    symbol.textContent = element.symbol;

                    const name = document.createElement('div');
                    name.className = 'text-sm mt-1';
                    name.textContent = element.name;

                    card.appendChild(symbol);
                    card.appendChild(name);
                    this.elementsContainer.appendChild(card);

                    card.addEventListener('click', () => this.toggleElementSelection(element.symbol));
                }
            });
        },

        updateStats() {
            this.moneyDisplay.textContent = this.money;
            this.researchLevelDisplay.textContent = this.researchLevel;
            this.investmentLevelDisplay.textContent = this.investmentLevel;

            if (this.nextElementIndex < this.elements.length) {
                const nextElement = this.elements[this.nextElementIndex];
                let cost = nextElement.cost;
                if (this.researchLevel > 1) {
                    cost /= (this.researchLevel);
                }
                this.nextElementCostDisplay.textContent = `Cost: â‚¬${Math.round(cost)}`;
                this.nextElementNameDisplay.textContent = nextElement.name;
                this.buyNextElementBtn.disabled = this.money < cost;
            } else {
                this.nextElementCostDisplay.textContent = "All Elements Unlocked!";
                this.nextElementNameDisplay.textContent = "";
                this.buyNextElementBtn.disabled = true;
                this.buyNextElementBtn.textContent = "Done!";
            }
            
            const investCost = this.calculateInvestCost();
            const researchCost = this.calculateResearchCost();

            this.investCostDisplay.textContent = `Cost: â‚¬${investCost}`;
            this.researchCostDisplay.textContent = `Cost: â‚¬${researchCost}`;

            const canInvest = this.money >= investCost;
            const canResearch = this.money >= researchCost;

            this.investShopBtn.disabled = !canInvest;
            this.researchLabBtn.disabled = !canResearch;

            this.investShopBtn.classList.toggle('pulse', canInvest);
            this.researchLabBtn.classList.toggle('pulse', canResearch);
        },

        calculateInvestCost() {
            return 50 * (this.investmentLevel + 1);
        },

        calculateResearchCost() {
            return 75 * (this.researchLevel);
        },

        buyNextElement() {
            const nextElement = this.elements[this.nextElementIndex];
            let cost = nextElement.cost;
            if (this.researchLevel > 1) {
                cost /= (this.researchLevel);
            }
            if (this.money >= cost) {
                this.money -= cost;
                nextElement.unlocked = true;
                this.unlockedElements.push(nextElement.symbol);
                this.nextElementIndex++;
                this.render();
                this.saveGame();
            } else {
                this.showSuccessMessage("Not enough money!");
            }
        },

        investShop() {
            const cost = this.calculateInvestCost();
            if (this.money >= cost) {
                this.money -= cost;
                this.investmentLevel++;
                this.customerFrequency = Math.max(1000, 3000 - (this.investmentLevel * 200));
                this.updateStats();
                clearInterval(this.customerInterval);
                this.startCustomerInterval();
                this.showSuccessMessage("Shop investment successful!");
                this.saveGame();
            } else {
                this.showSuccessMessage("Not enough money!");
            }
        },

        researchLab() {
            const cost = this.calculateResearchCost();
            if (this.money >= cost) {
                this.money -= cost;
                this.researchLevel++;
                this.updateStats();
                this.showSuccessMessage("Research level increased!");
                this.saveGame();
            } else {
                this.showSuccessMessage("Not enough money!");
            }
        },

        toggleElementSelection(symbol) {
            const index = this.selectedElements.indexOf(symbol);
            if (index > -1) {
                this.selectedElements.splice(index, 1);
            } else {
                this.selectedElements.push(symbol);
            }
            this.renderElements();
        },

        generateCustomer() {
            const availableCustomers = this.customers.filter(customer => {
                return customer.needs.every(need => this.unlockedElements.includes(need));
            });

            if (availableCustomers.length === 0) return null;

            const customer = availableCustomers[Math.floor(Math.random() * availableCustomers.length)];
            return {
                ...customer,
                id: Date.now(),
                reward: customer.reward + (this.investmentLevel * 5)
            };
        },

        addCustomerToQueue() {
            if (this.activeCustomer) return;
            const newCustomer = this.generateCustomer();
            if (newCustomer) {
                this.activeCustomer = newCustomer;
                const customerCard = document.createElement('div');
                customerCard.className = 'customer-card customer-card-animated w-full';
                customerCard.dataset.id = newCustomer.id;
                
                const customerName = document.createElement('h3');
                customerName.className = 'text-lg font-bold mb-1';
                customerName.textContent = newCustomer.name;

                const customerNeeds = document.createElement('div');
                customerNeeds.className = 'flex flex-wrap justify-center text-sm font-semibold text-gray-700';
                customerNeeds.innerHTML = `Needs: ${newCustomer.needs.map(symbol => `<span class="bg-gray-200 rounded-full px-2 py-0.5 m-0.5">${symbol}</span>`).join('')}`;

                const customerReward = document.createElement('p');
                customerReward.className = 'text-sm text-green-600 mt-2';
                customerReward.textContent = `Reward: â‚¬${newCustomer.reward}`;

                customerCard.appendChild(customerName);
                customerCard.appendChild(customerNeeds);
                customerCard.appendChild(customerReward);

                customerCard.addEventListener('click', () => {
                    this.serveCustomer(newCustomer);
                });

                this.customerQueueContainer.appendChild(customerCard);
            }
        },

        serveCustomer(customer) {
            const sortedSelected = this.selectedElements.sort();
            const sortedNeeds = customer.needs.sort();

            const isCorrect = JSON.stringify(sortedSelected) === JSON.stringify(sortedNeeds);
            
            if (isCorrect) {
                this.money += customer.reward;
                this.showSuccessMessage(`Success! Earned â‚¬${customer.reward}`);
            } else {
                this.showSuccessMessage("Incorrect order! The customer leaves frustrated.");
            }
            
            this.selectedElements = [];
            this.renderElements();
            this.updateStats();
            this.saveGame();
            this.removeCustomerFromQueue(customer.id);
        },

        removeCustomerFromQueue(id) {
            const card = this.customerQueueContainer.querySelector(`[data-id="${id}"]`);
            if (card) {
                card.classList.add('fade-out');
                setTimeout(() => {
                    card.remove();
                    this.activeCustomer = null;
                    // Immediately trigger a new customer to appear
                    this.addCustomerToQueue();
                }, 500);
            }
        },
        
        showSuccessMessage(message) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'success-message';
            messageDiv.textContent = message;
            document.body.appendChild(messageDiv);
            setTimeout(() => {
                messageDiv.remove();
            }, 2000);
        },

        showModal(title, text, confirmAction = null) {
            this.modalTitle.textContent = title;
            this.modalText.innerHTML = text;
            this.modalButtons.innerHTML = '';
            
            if (confirmAction) {
                const confirmBtn = document.createElement('button');
                confirmBtn.className = 'bg-green-500 text-white rounded-md px-4 py-2 hover:bg-green-600 transition-colors duration-200';
                confirmBtn.textContent = 'Yes, Restart';
                confirmBtn.addEventListener('click', () => {
                    this.hideModal();
                    confirmAction();
                });
                this.modalButtons.appendChild(confirmBtn);

                const cancelBtn = document.createElement('button');
                cancelBtn.className = 'bg-red-500 text-white rounded-md px-4 py-2 hover:bg-red-600 transition-colors duration-200';
                cancelBtn.textContent = 'Cancel';
                cancelBtn.addEventListener('click', () => this.hideModal());
                this.modalButtons.appendChild(cancelBtn);

            } else {
                const closeBtn = document.createElement('button');
                closeBtn.id = 'close-modal-btn';
                closeBtn.className = 'bg-red-500 text-white rounded-md px-4 py-2 hover:bg-red-600 transition-colors duration-200';
                closeBtn.textContent = 'Close';
                closeBtn.addEventListener('click', () => this.hideModal());
                this.modalButtons.appendChild(closeBtn);
            }

            this.modalContainer.classList.remove('hidden');
        },

        hideModal() {
            this.modalContainer.classList.add('hidden');
        },
        
        toggleDarkMode() {
            document.documentElement.classList.toggle('dark');
            this.saveGame();
        },

        setupListeners() {
            this.buyNextElementBtn.addEventListener('click', () => this.buyNextElement());
            this.investShopBtn.addEventListener('click', () => this.investShop());
            this.researchLabBtn.addEventListener('click', () => this.researchLab());
            this.toggleDarkModeBtn.addEventListener('click', () => this.toggleDarkMode());
            this.restartGameBtn.addEventListener('click', () => {
                this.showModal(
                    "Restart Game?", 
                    "Are you sure you want to restart? This will erase all your progress.", 
                    () => this.resetGame()
                );
            });

            this.customerQueueContainer.addEventListener('click', (event) => {
                const customerCard = event.target.closest('.customer-card');
                if (customerCard) {
                    const customerId = customerCard.dataset.id;
                    const customer = this.activeCustomer;
                    if (customer && customer.id.toString() === customerId) {
                        this.showModal(customer.name, customer.story);
                    }
                }
            });
        },

        startCustomerInterval() {
            // Check every 3 seconds if a new customer is needed, and add one if the slot is empty
            this.customerInterval = setInterval(() => {
                this.addCustomerToQueue();
            }, this.customerFrequency);
        },
    };

    window.onload = () => {
        game.init();
    };
</script>

</body>
</html>
